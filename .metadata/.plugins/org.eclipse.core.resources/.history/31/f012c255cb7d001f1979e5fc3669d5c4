package com.example.project.Config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.project.Repository.UserRepository;
import com.example.project.Service.CustomUserDetailsService;
import com.example.project.Service.UserService;

@Configuration
@EnableWebSecurity
public class AppConfig {
	
	private final UserService userService;
	
	private final UserRepository userRepository;
	
	private final PasswordEncoder passwordEncoder;
	
	private final CustomUserDetailsService customUserDetailsService;
	
	public AppConfig(UserService userService, 
			UserRepository userRepository, 
			PasswordEncoder passwordEncoder,
			CustomUserDetailsService customUserDetailsService) {
		this.userRepository = userRepository;
		this.userService = userService;
		this.passwordEncoder = passwordEncoder;
		this.customUserDetailsService = customUserDetailsService;
		
	}
	
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		http
			.sessionManagement(management -> management.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
			.authorizeHttpRequests(Authorize -> Authorize.requestMatchers("/api/**").authenticated()
					.anyRequest().permitAll());
			
		
		return http.build();
			
	}
	
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
}
